-Force forces a command to complete with no input requirded
-ErrorAction gives opotions to handle errors with commands


Get-ChildItem -path C:\ -Recurse -Filter *.pf -name
-finds every file with .pf in C:\

#switch parameters are boolean and are off by defualt EX: -recurse
#postitional parameters do not need specification and ps will try to interpret them based on content type

Get-ChildItem -recurse -filter C:\ *.pf -name 
#C:\ is positional and does not need -path and can be moved anywhere

Get-Command
#gets every command 

Get-Command -noun *item*
#any command wth item in the noun( works with verb too)


Get-Command *keyword*
#best option  

VARIABLES:

write-host writes directly to the screeen
write-output passes data to next command

      Python      Bash      PoSh
init  var         var       $var
call  var         $var      $var

$varS = "string"
$var = 85869

$var - 1

$var1,$var2 = 65535,-1

$var1 = $var2 = $var3 = 65535
-all equal 65535

del = remove-item removes variables

remove-item varible:var1

AUTOMATIC VARIABLES:

$args - Contains an array of values for undeclared parameters that are passed to a function, script, or script block. 

$input - Contains an enumerator that enumerates all input that is passed to a function.

$_ - Same as $PSItem. Contains the current object in the pipeline object. You can use this variable in commands that perform an action on every object or on selected objects in a pipeline.

$PROFILE - Contains the full path of the PowerShell profile for the current user and the current host application. You can use this variable to represent the profile in commands.

$null - $null is an automatic vareate an array containing a range with a random starting and stopping point. The starting point will be a random number from -10 through 0. The ending point will be a random number from 1 through 20.iable that contains a null or empty value. You can use this variable to represent an absent or undefined value in commands and scripts.

$true
$false

ENVIROMENTAL VARIABLES:

$env:HomePath
C:\users\student\

TYPECASTING:

$int="string" - is string

$int = 4 - is int

[int]$int = 4 - convert to int

[int]$string = "4" - temporarely converts to int  
  
[int]0xFF
255


ARRAYS:

$array = 1,2,3,4,5
$array = @(1,2,3,4,5)
[array]$blankarray = ""

$array -is [array]
True

$array.count
-number of elements

$poly_arr = (get-computerinfo) , "help me, im trapped", 6472
-runs get-computer info but stores it as one element along with the 2 other elements


$poly_arr | select-object -index 1
$poly_arr[1]
-references second element

$seq_nums = 4..50
-list of numbers 4-50


$seq_nums[-1]
-last index

$seq_nums[1,30,20,11]

JAGGED ARRAYS:xfreerdp /u:student /v:IP_Address /dynamic-resolution +glyph-cache +clipboard

$nested = @,!,$array,#

Inerp:
{@,!,{1,2,3},#}

Human view:
@,$null,$null
!,$null,$null
1,2,3
#,$null,$null

$nested[2] = 1,2,3

$nested[2][1] = 2

$nested[3][1] = $error

Multi-deminsional array:

$multi = {tri, square, {@,!,{1,2,3},#} cir}

Human View:

tri,    $null, $null, $null
square, $null, $null, $null
@,      !,     1,     #
$null,  $null ,2,     $null
$null,  $null, 3,     $null 
cir,   $null, $null,  $null



$rev = $array[($array.length-1)..0]




HASH TABLES:


@{} to declare

@{key="value" ; key2="value2"}


$hash2.is_anime = "yes"
is_anime        yes


$hash2["is_bad"] = "yes2"


$hash2.add("OPM","Saitama")


$ordered = [ordered]@{}


$ordered.values
$ordered.keys




OBJECTS:

Get-member
-shows object methods
Get-member -InputObject Get-service

get-service | Sort-Object -Property status
-sorts on status instead of name

1..10 | Sort-Object -Property { get-Random } 
-randomizes sorting

get-service | where-object {$_.status -eq "Running"}
-only produces running serivce 

get-process svchost | Select-Object -ExpandProperty handles
-only gives the data without added title

get-process | sort-object startime | select-object -last 10 | format-table  Processname, Starttime

1,2,3,4,5,4,5,3,5,3,2,4,5,1,3,4 | sort-object | get-unique
-takes out all dupllicates

Compare-Object $before $after _property length, name

10 test.txt => 
120 test.txt <= 

SCRIPT BLOCKS:

$myblock = {Get-Service | Format-Table Name, Status}
-dynamic varible everytime its called

$b = {1 + 1 =$c}

to evaluate &$b


 

 CUSTOM OBJECTS:
 
 $mycar

$mycar = New-Object Object

PS C:\windows\system32> Add-Member -MemberType NoteProperty -Name Color -value "Blue-gray Green Turqoise Thing" -InputObject $mycar = -Val

PS C:\windows\system32> Add-Member -MemberType ScriptMethod -Name Read -Value {"I'm not entirely sure this book is appropriate."} -InputObject $mycar


COMPARISON OPERATORS:

Equals
2 -eq 2
2 -eq 3
1,2,3 -eq 2
"abc" -eq "abc"
"abc" -eq "abc", "def"
"abc", "def" -eq "abc"

Not Equals
"abc" -ne "abc"
"abc" -ne "def"
"abc" -ne "abc", "def"
"abc", "def" -ne "abc"

Greater than
8 -gt 6
7,8,9 -gt 8

less than
6 -lt 8
7,8,9 -lt 9

Greater than or equal
6 -ge 6
5,6,7 -ge 6

Less than or equal
6 -le 6
5,6,7 -le 6

like
"Inky" -like "*" true
"Blinky" -like "Bl?nky" true
"Pinky" -like "[L-Q]inky" true
"Clyde" -like "[ABC]lyde" true

"Inky" -notlike "*" false
"Blinky" -notlike "Bl?inky" true
"Pinky" -notlike "[A-F]inky" true 
"Clyde" -notlike "[DEF]lyde" true


match
$text = "Your Account username is ACE4495"
$pattern = '([A-F{3})(\d{4})'
$text -match $pattern true

contains 
$ghosts = 'Inky', 'Blinky', 'Pinky', 'Clyde'
$ghosts -contain 'pinky'


-for case sensetivity put a 'c' in front of compareison op

$num = 5

(($num -gt 1) -and ($num -lt 10)) true

(($num -gt 6) -or ($num -lt 10)) true




Get-Service | Where-Object{$_.Status -eq 'running'}

Get-Childitem *.txt | Where-Object{$_.Length -gt 100}

Get-Process | Where-Object {$_.Company -like 'micro*'} | Format-Table Name, Description, Company

Conditional:

if ($x -eq 5) {
      Write-Host "Bob"
}
elseif ($x -eq 4) {
      Write-Host "Sue"
}
elseif ($x -eq 2) {
      "tom"
}
elseif ($x -gt 1) {
      "Mary"
}
else{
"who am i"
}


Switch(10)
{
      (1+9){
            "correct"
      }
      (1+10){
      "wrong"
      }
      (11-1){
      "correct"
      }
      (1-11){
      "wrong"
      }
}


      



$line1 = "Do you have model number: MT5437 for john.doe@sharklasers.com?"
$line2 = "What model number for john.doe@sharklasers.com?"
$pattern = '\s[A-Z][A-Z]\d\d\d\d\s'

switch($pattern){

{$line1 -match $_}{
$line1 -match $pattern | out-null
$model = $matches[0]
"$model in line 1"
}
{$line2 -match $_}{
$line2 -match $pattern | out-null
$model = $Matches[0]
"$model in line 2"
}
{$line1 -notmatch $_}{
"no matchh line 1"
}
{$line2 -notmatch $_}{
"no match line 2"
}
}







LOOPS:

for (initialization; condition; increment)
{
code
}


foreach ($item in expression)
{
code
}

EX: foreach (item in gci C:\ -recurse){$item.name}


$boject | foreach-object { code }


while(condition){
code
}

do{
code
}while(condition)

do{
code
}until(condition is false)



FILES:

Get-content
-reads from file

(get-content .\example.txt)[0]
-writes to line 1

set-content
-writes to file

EX: set-content -path .\example.txt -value "string"

add-content
-appends to a file

EX: add-content -path .\example.txt -value "another string"




















